# morphOMICs pipeline and parameter setup

# sequential list of executables
# Choices of executables: Input, Load_data, Clean_frame, Bootstrap, Persistence_Images, UMAP, 
#                         Palantir, Plotting, Mapping, Clear_morphframe, Prepare_ReductionInfo, 
#                         Sholl_curves, Morphometrics
# This is an example of a standard morphOMICs pipeline to obtain the morphological spectrum
Protocols = [
        "Input",
        "Clean_frame",
        "Bootstrap",
        "Persistence_Images",
        "UMAP",
        "Prepare_ReductionInfo",
        "Plotting",
    ]

Parameters_ID = "Brain_test"
  
# set this if you have ran morphOMICs with this set of parameters and you want to re-do it but with the latest saved instance
# use case: you tried running run_morphomics.py but it failed at some protocol
load_previous_instance = false
# set this if you want to always save last instance
save_last_instance = true
path_to_last_instance = "test/saved_instances"



[Input]
# filepath pointing to the parent folder containing the .swc files arranged hierarchically according to conditions
"data_location_filepath" = "./examples/data"

# .swc file extension, "_corrected.swc" refers to .swc files that were corrected with NeurolandMLConverter
"extension" = "_corrected.swc"

# this must match the hierarchical structure of `data_location_filepath`
"conditions" = [
            "Region",
            "Model",
            "Sex",
            "Animal",
        ]
        
# this is the TMD filtration function, can either be radial_distances, or path_distances
"barcode_filter" = "radial_distances"

# this is how the variable will be called
"morphoframe_name" = "morphoframe"

# I would advise saving the loaded data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true

# saving chunks of the whole data (according to `separated_by`) makes it less painful if there was a problem with the file processing in the middle of running `Input`
# this must be an element of `conditions`
"separated_by" = "Model"

# location where to save the data
"save_folder" = "test/saved_instances"

# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].[separated_by]-
# Otherwise, this will be used as the file prefix
"file_prefix" = 0


[Clean_frame]
# if not 0, must contain the filepath to the morphoframe which will then be saved into morphoframe_name
# otherwise, `morphoframe_name` is the morphoframe that will be cleaned up
"morphoframe_filepath" = 0
"morphoframe_name" = "morphoframe"

# remove morphologies if the number of bars is less than the cutoff
"barcode_size_cutoff" = 5

# retain bars whose length satisfy a certain cutoff
# must be an array with three elements, ["greater_than" "less_than" or "within", bar length condition (must be an array if using "within"), "drop" or "keep"]
# the example below keeps bars whose length is greater than 0, and less than 200.
# if not used, comment the elements of `barlength_cutoff` out
"barlength_cutoff" = [ 
           # ["<=", 0],
           # [">=", 200]
           ]

# enumerate which conditions will be merged
# must be an array with three elements [a header of the info_frame (is an element of `Input.conditions`),
#                                       a list of conditions that will be merged (must be an array), 
#                                       the new name of the merged conditions]
# if not used, comment the elements of `combine_conditions` out
"combine_conditions" = [
    ["Model", ["Saline_4h", "Saline_48h"], "Adult"]
]

# enumerate restrictions
# must be an array with three elements [a header of the info_frame (is an element of `Input.conditions`),  
#                                       list of conditions to either drop or keep (must be an array), 
#                                       "drop" or "keep" conditions specified]
# if not used, comment the elements of `restrict_conditions` out
"restrict_conditions" = [

]

# I would advise saving the cleaned data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true

# location where to save the data
"save_folder" = "test/saved_instances"

# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Cleaned.
# Otherwise, this will be used as the file prefix
"file_prefix" = 0



[Bootstrap]
# if not 0, must contain the filepath to the morphoframe
"morphoframe_filepath" = 0
"morphoframe_name" = "morphoframe"

# must be an array with two elements [feature (one of the headers in morphoframe), "bars", "scalar" or "array"]
"feature_to_bootstrap" = ["Barcodes", "bars"]           # bootstraps by collapsing the lists into a single list 
# "feature_to_bootstrap" = ["nb_bars", "scalar"] # bootstraps by taking the average of an array
# "feature_to_bootstrap" = ["Sholl", "array"]           # # bootstraps by taking the element-wise average of a high-dimensional NumPy array

# use this if you want to constraint your bootstrapping to a subset of conditions that you did not drop using `Clean_frame`
# column name in morphoframe where the bootstrap_conditions are located
"condition_column" = "Condition"
# conditions to bootstrap
# if this array is empty, it will bootstrap across all conditions in the morphoframe
"bootstrap_conditions" = [

        ]
        

# which conditions combinations which bootstrapping will consider as a unique condition
"bootstrap_resolution" = [
                    "Region",
                    "Model",
                    "Sex",
        ]
        
        
# set the seed of the random number, for reproducibility
"rand_seed" = 34151


# if this is opted, N_pop will be calculated as ratio*(total number of morphologies in a given condition combination)
# if 0, you must input N_pop
"ratio" = 0
# number of morphologies to take averages of
# set this to 1 if you don't want to perform bootstrapping
"N_pop" = 15
# number of bootstrap samples to create
"N_samples" = 500


# where the bootstrapped morphoframes will be stored
"bootstrapframe_name" = "bootstrap_frame"
"morphoinfo_name" = "bootstrap_info"


# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store bootstrapped conditions
"save_folder" = "test/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Bootstrap.
# Otherwise, this will be used as the file prefix
"file_prefix" = 0


[Persistence_Images]
# if not 0, must contain the filepath to the bootstrapframe
"morphoframe_filepath" = 0
"morphoframe_name" = "bootstrap_frame"


# paramteres for calculating persistence images
# spread of the Gaussian
"bw_method" = 0.5
# how to normalize the persistence image, can be "sum" or "max"
"norm_method" = "sum"
# constraints to the axes limits
"xlims" = [0, 200]
"ylims" = [0, 200]
# if not 0, must point to the location containing the weights to each bar
"barcode_weight" = 0


# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store bootstrapped conditions
"save_folder" = "test/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Bootstrap.
# Otherwise, this will be used as the file prefix
"file_prefix" = 0


[UMAP]
# if not 0, must contain the filepath to the bootstrapframe
"PersistenceImages_filepath" = 0


# if 0, no pixel filtering will be done
"filter_pixels" = 1
# if not 0, must contain the filepath to the indices of the persistence image that will be filtered
"filteredpixelindex_filepath" = 0
# if filteredpixedindex_filepath is not zero, this will be ignored
"pixel_std_cutoff" = 1e-4


# if 0, the persistence image array will not be initially reduced
# do not do this if you plan to use the UMAP function for mapping
"run_PCA" = 0
"n_PCs" = 50


# UMAP parameters
"n_neighbors" = 300
"min_dist" = 0.05
"spread" = 3.0
"random_state" = 34151
"metric" = "manhattan"
"densmap" = 0 # zero is false
"n_components" = 3


# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store UMAP function and reduced manifold coordinates
"save_folder" = "test/saved_instances"
# if 0, morphOMICs will automatically create a file prefix
# Otherwise, this will be used as the file prefix
"file_prefix" = 0


[Prepare_ReductionInfo]
"declare_filepaths" = false
"UMAP_filepath" = 0
"BootstrapInfo_filepath" = 0

# dictionary keys to the metadata
"coordinate_key" = "X_umap"
"morphoinfo_key" = "bootstrap_info"
"coordinate_axisnames" = "UMAP"

# path to folder where to store UMAP function and reduced manifold coordinates
"save_folder" = "test/saved_instances"
# if 0, morphOMICs will automatically create a file prefix
# Otherwise, this will be used as the file prefix
"file_prefix" = 0


[Plotting]
# if 0, you must supply Coordinate_filepath AND MorphoInfo_filepath
# else, you can either supply the ReductionInfo_filepath, 
# or if you want to infer the manifold coordinates and morphoinfo_frame from Protocol instance, supply any character other than '0'
"ReductionInfo_filepath" = [
"infer",
# reductioninfo_filepath2,
# reductioninfo_filepath3,
]
"coordinate_axisnames" = "UMAP"


"coordinate_key" = "X_umap"
"morphoinfo_key" = "bootstrap_info"


# If these are not 0, must point to the location of the manifold coordinates
"Coordinate_filepath" = [ 
# coordinate_filepath1,
# coordinate_filepath2,
# coordinate_filepath3,
]
# If these are not 0, must point to the location of the morpho_infoframe that corresponds to each element of `Coordinate_filepath`
"MorphoInfo_filepath" = [ 
# morphoinfo_filepath1,
# morphoinfo_filepath2,
# morphoinfo_filepath3,
]

# Location to the color mapping that will be used
# 
"colormap_filepath" = [
    "./examples/Parameter_files/colormap.1.csv",
# colapmap_filepath2,
# colapmap_filepath3,
]

# Must correspond to each element in `Coordinate_filepath`
label_prefixes = [
    "Sample"
# label_prefix2,
# label_prefix3,
]

# If you need to substitute the name of a condition in morpho_infoframe, use this
# 
"Substitutions" = [
#   [ substitutions for morphoinfo_filepath1 ],
#   [ substitutions for morphoinfo_filepath2 ],
#   [ substitutions for morphoinfo_filepath3 ],
]

# Trigger to show the interactive plot
"show_plot" = true

# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true

# path to folder where to store UMAP function and reduced manifold coordinates
"save_folder" = "test/saved_instances"

# if 0, morphOMICs will automatically create a file prefix
# Otherwise, this will be used as the file prefix
"file_prefix" = "Brain"