# morphOMICs pipeline and parameter setup

# sequential list of executables
# Choices of executables: Input, Load_data, Clean_frame, Bootstrap, Vectorizations, Dim_reductions, 
#                         Plotting, Mapping, Save_reduced, Save_parameters,
#                         Sholl_curves, Morphometrics,
#                         Clear_morphoframe.
# This is an example of a standard morphOMICs pipeline to obtain the morphological spectrum.
Protocols = [
        "Input",
        "TMD",
        "Clean_frame",
        "Bootstrap",
        "Vectorizations",
        "Dim_reductions",
        "Save_reduced",
        "Plotting",
    ]

Parameters_ID = "Brain_trial"
  
# Set load_previous_instance = true if you have ran morphOMICs with this set of parameters and you want to re-do it but with the latest saved instance of protocols.
# Use case: you tried running run_morphomics.py but it failed at some protocol.
load_previous_instance = false
path_to_last_instance = "examples/saved_instances"

# Set save_instance = true if you want to always save last instance of protocols.
save_instance = true
path_to_new_instance = "examples/saved_instances"


[Input]
# Path pointing to the parent folder containing the .swc files arranged hierarchically according to 'conditions'.
"data_location_filepath" = "examples/data"

# .swc file extension, "_corrected.swc" refers to .swc files that were corrected with NeurolandMLConverter.
"extension" = "_corrected.swc"

# This must match the hierarchical structure of `data_location_filepath`.
"conditions" = [
            "Region",
            "Model",
            "Sex",
            "Animal",
        ]
        
# Saving chunks of the whole data (according to `separated_by`) makes it less painful if there was a problem with the file processing in the middle of running `Input`.
# This must be an element of `conditions`.
"separated_by" = "Model"

# This is how the variable will be called.
# The variable is a PandaDataframe stored in Protocols.morphoframe.
# It contains computed information about microglia (filepath, Region, barcode ...)
"morphoframe_name" = "morphoframe"

# I would advise saving the loaded data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# Location where to save the data.
"save_folderpath" = "examples/saved_instances"
# If 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].[separated_by]-.
# Otherwise, this will be used as the file prefix.
"save_filename" = 0


[TMD]
# If not 0, must contain the filepath to the morphoframe which will then be saved into morphoframe_name
# Otherwise, `morphoframe_name` is the morphoframe that will be cleaned up.
"morphoframe_filepath" = 0
"morphoframe_name" = "morphoframe"

# This is the TMD filtration function, can either be radial_distance, or path_distance.
"filtration_function" = "radial_distance"

# Trees may contain trunks without branch. Sometimes, these trunks come from reconstruction artifact.
exclude_sg_branches = true

# I would advise saving the loaded data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true

# Location where to save the data.
"save_folderpath" = "examples/saved_instances"

# If 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].[separated_by]-.
# Otherwise, this will be used as the file prefix.
"save_filename" = 0

[Clean_frame]
# If not 0, must contain the filepath to the morphoframe which will then be saved into morphoframe_name
# Otherwise, `morphoframe_name` is the morphoframe that will be cleaned up.
"morphoframe_filepath" = 0
"morphoframe_name" = "morphoframe"

# Remove morphologies if the number of bars is less than the cutoff.
"barcode_size_cutoff" = 5

# Retain bars whose length satisfy a certain cutoff
# must be an array with three elements, ["greater_than" "less_than" or "within", bar length condition (must be an array if using "within"), "drop" or "keep"]
# the example below keeps bars whose length is greater than 0, and less than 200.
# if not used, comment the elements of `barlength_cutoff` out
"barlength_cutoff" = [ 
           # ["<=", 0],
           # [">=", 200]
           ]

# enumerate which conditions will be merged
# must be an array with three elements [a header of the info_frame (is an element of `Input.conditions`),
#                                       a list of conditions that will be merged (must be an array), 
#                                       the new name of the merged conditions]
# if not used, comment the elements of `combine_conditions` out
"combine_conditions" = [
    #["Model", ["Saline_4h", "Saline_48h"], "Adult"]
]

# enumerate restrictions
# must be an array with three elements [a header of the info_frame (is an element of `Input.conditions`),  
#                                       list of conditions to either drop or keep (must be an array), 
#                                       "drop" or "keep" conditions specified]
# if not used, comment the elements of `restrict_conditions` out
"restrict_conditions" = [

]

# I would advise saving the cleaned data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# location where to save the data
"save_folderpath" = "examples/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Cleaned.
# Otherwise, this will be used as the file prefix
"save_filename" = 0


[Bootstrap]
# if not 0, must contain the filepath to the morphoframe
"morphoframe_filepath" = 0
"morphoframe_name" = "morphoframe"

# must be an array with two elements [feature (one of the headers in morphoframe), "bars", "scalar" or "array"]
"feature_to_bootstrap" = ["barcodes", "bars"]           # bootstraps by collapsing the lists into a single list 
# "feature_to_bootstrap" = ["nb_bars", "scalar"] # bootstraps by taking the average of an array
# "feature_to_bootstrap" = ["Sholl", "array"]           # # bootstraps by taking the element-wise average of a high-dimensional NumPy array

# conditions to bootstrap
# if this array is empty, it will bootstrap across all conditions in the morphoframe
"bootstrap_conditions" = ['Region', 'Model', 'Sex'
        ]

# Number of pools. A pool is a sub set of features in a population.
"N_bags" = 50
# Number of features in a pool.
"n_samples" = 15
# If n_samples == 0. ratio is used.
# If this is opted, n_samples will be calculated as ratio*(total number of morphologies in a given condition combination)
# If ratio == 0, you must input n_samples.
"ratio" = 0

# set the seed of the random number, for reproducibility
"rand_seed" = 34151

# where the bootstrapped morphoframes will be stored
"bootstrapframe_name" = "bootstrap_frame"
# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store bootstrapped conditions
"save_folderpath" = "examples/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID_[xxx].[barcode_filter].Bootstrap.
# Otherwise, this will be used as the file prefix
"save_filename" = 0


[Vectorizations]
# if not 0, must contain the filepath to the morphoframe
"morphoframe_filepath" = 0
"morphoframe_name" = "bootstrap_frame"

# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store bootstrapped conditions
"save_folderpath" = "examples/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Bootstrap.
# Otherwise, this will be used as the file prefix
"save_filename" = 0

    [Vectorizations.vect_method_parameters]
        [Vectorizations.vect_method_parameters.persistence_image]
            # Compute de interval of the vectorization for each barcode
            "rescale_lims" = false
            # fix interval
            "xlims" = "None"
            "ylims" = "None"
            # vaqriance of the gaussian kernel
            "bw_method" = "None"
            # weight the bars of the barcode
            "barcode_weight" = "None"
            # normalize the vector (see norm methods in utils.py)
            "norm_method" = "sum"
            # number of pixels in a row and column
            "resolution" = 100

        # [Vectorizations.vect_method_parameters.lifespan_curve]
        # # Compute de interval of the vectorization for each barcode
        # "rescale_lims" = false
        # # fix interval
        # "xlims" = "None"
        # # normalize the vector (see norm methods in utils.py)
        # "norm_method" = "one"
        # # number of bins in the interval, determines the dimensions of the ouput vector
        # "resolution" = 50

        # [Vectorizations.vect_method_parameters.betti_curve]
        # "rescale_lims" = false
        # "xlims" = "None"
        # "norm_method" = "one"
        # "resolution" = 50


        # [Vectorizations.vect_method_parameters.life_entropy_curve]
        # "rescale_lims" = false
        # "xlims" = "None"
        # "norm_method" = "one"
        # "resolution" = 50


[Dim_reductions]
# if not 0, must contain the filepath to the bootstrapframe
"morphoframe_filepath" = 0
# Name of the mrophoframe that contains the vectors to dim reduce
"morphoframe_name" = "bootstrap_frame"

# the name of the column in morphoframe that contains the vectors to dim reduce
"vectors_to_reduce" = 'pi'
# a function that put to 0 the value of pixel that exeed a certain value computed by the std of the image
"filter_pixels" = false
#
"normalize" = true
#
"standardize" = true

# I would advise saving the data; value is either `true` or `false` (warning: take note that all the letters are in lower case)
"save_data" = true
# path to folder where to store bootstrapped conditions
"save_folderpath" = "examples/saved_instances"
# if 0, morphOMICs will automatically create a file prefix, i.e., Morphomics.PID[xxx].[barcode_filter].Bootstrap.
# Otherwise, this will be used as the file prefix
"save_filename" = 0
# Save the fitted embedder to map/transform new vectors.
"save_dimreducer" = true

    [Dim_reductions.dimred_method_parameters] 

        # [Dim_reductions.dimred_method_parameters.pca]
        # parameters for pca
        # see doc of pca in morphomics.Analysis.dim_reducer.py
        # "n_components" = 10
        # "svd_solver" = true
        # "pca_version" = 'normal'                 
                                
        [Dim_reductions.dimred_method_parameters.umap]
        # parameters for umap
        "n_components" = 3
        "n_neighbors" = 20
        "min_dist" = 0.1
        "spread" = 3.0
        "random_state" = 10
        "metric" = "manhattan"
        "densmap" = false


[Save_reduced]
# if not 0, must contain the filepath to the reduced vectors
"morphoframe_filepath" = 0
# basically the TMD or the bootstrap_data
"morphoframe_name" = 'bootstrap_frame'
# name of other features that you want to save from morphoframe to csv file
"conditions_to_save" = ["Region",
                        "Model",
                        "Sex"]
# the method that was used tu dim reduce
"dimred_method" = "umap"
# the prefix name of the columns where the coordinates are stored
"coordinate_axisnames" = "umap_"

# path to folder where to store UMAP function and reduced manifold coordinates
"save_folderpath" = "examples/saved_instances"
# if 0, morphOMICs will automatically create a file prefix
# Otherwise, this will be used as the file prefix
"save_filename" = 0


[Mapping]
# if not 0, must contain the filepath to the morphoframe which will then be saved into morphoframe_name
# otherwise, it is the self.metadata that will be used 
"fitted_dimreducer_filepath" = 0
# The name of the fitted dim reducers
"dimred_method" = "fitted_umap"

# if not 0, must contain the filepath to the vectors to map
"morphoframe_filepath" = 0
"morphoframe_name" = 'morphoframe'
"vectors_to_reduce_name" = 'pi'
"filter_pixels" = false
"FilteredPixelIndex_filepath" = 'None'
"normalize" = false
"standardize" = false

"save_data" = true
# path to folder where to store UMAP function and reduced manifold coordinates
"save_folderpath" = "examples/saved_instances"
# If 0, morphOMICs will automatically create a file prefix
# Otherwise, this will be used as the file prefix.
"save_filename" = 0



[Plotting]
# If not 0, must contain the filepath to the morphoframe which will then be saved into morphoframe_name
# Otherwise, it is the self.morphoframe that will be used.
"morphoframe_filepath" = 0
# The name of the dataframe containing the reduced vectors (dim should be 3).
"morphoframe_name" = "bootstrap_frame"
# Conditions that make a category.
"conditions" = ["Region", "Model", "Sex"]
# Name of the column containing reduced vectors (dim 3).
"reduced_vectors_name" = "umap"

# Name of the axis.
"axis_labels" = ['x', 'y', 'z']
# Title of the plot.
"title" = "UMAP"
# Colors of each category of data point.
# If empty list, the choice of colors is by default.
# If the number of colors in the list is equal to the number of categoies,
# they will be distributed.
# If the number of colors is half the number of categories,
# they will be distributed without taking into account gender.
# Different genders will have different shade of the color.
"colors" = []
"circle_colors" = []
# The size of the points on the figure.
"size" = 3
# Shade difference of the color (in third case).
'amount' = 0.1

# Save the data or not.                       
"save_data" = true
# Path to folder where to store the html file of the figure to plot.
"save_folderpath" = "examples/saved_instances"
# If 0, morphOMICs will automatically create a file prefix.
# Otherwise, this will be used as the file name.
"save_filename" = 0